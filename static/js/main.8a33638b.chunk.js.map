{"version":3,"sources":["components/SlideLanding.js","components/SlideScore.js","components/SlideQuestion.js","components/SlideSubmitAnswer.js","components/SlideLast.js","components/SlideLoading.js","App.js","serviceWorker.js","index.js"],"names":["SlideLanding","props","onClick","react_default","a","createElement","className","SlideScore","onClickShowAnswer","onClickTryAgain","score","SlideQuestion","quiz","selectAnswer","userAnswers","isAnswersSubmitted","id","question","choices","correctChoice","explanation","map","choice","key","classNames","isSelectedAnswer","answer","isCorrectAnswer","answer-selected","answer-correct","answer-wrong","choiceClassNames","handleOnClick","SlideSubmitAnswer","SlideLast","SlideLoading","App","_useState","useState","_useState2","Object","slicedToArray","setUserAnswers","_useState3","_useState4","setScore","_useState5","_useState6","setIsAnswersSubmitted","_useState7","_useState8","isLoading","setisLoading","slider","useRef","nextSlide","current","slickNext","_ref","prevAnswers","objectSpread","defineProperty","calculateScore","checkedAnswers","totalScore","values","forEach","isCorrect","sliderSettings","dots","infinite","arrows","appendDots","dot","React","cloneElement","dot-answered","dot-correct","dot-wrong","lib_default","assign","ref","quizList","_loop","find","checkAnswers","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a33638b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function SlideLanding(props) {\n  const { onClick } = props;\n\n  return (\n    <div className=\"slide slide-landing\">\n      <h1>HN Pop Quiz</h1>\n      <h2>How much do you know about unimportant things on HN?</h2>\n\n      <button className=\"pure-button\" onClick={onClick}>\n        Let's go\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function SlideScore(props) {\n  const { onClickShowAnswer, onClickTryAgain, score } = props;\n\n  return (\n    <div className=\"slide slide-score\">\n      <h1>Results:</h1>\n      <h2>{score} / 10</h2>\n\n      <button className=\"btn-show-answer\" onClick={onClickShowAnswer}>\n        Show Answers\n      </button>\n      <br />\n      <button className=\"btn-try-again\" onClick={onClickTryAgain}>\n        Try again\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nexport default function SlideQuestion(props) {\n  const { quiz, selectAnswer, userAnswers, isAnswersSubmitted } = props;\n  const { id, question, choices, correctChoice, explanation } = quiz;\n\n  const handleOnClick = choice => {\n    !isAnswersSubmitted &&\n      selectAnswer({\n        id,\n        answer: choice\n      });\n  };\n\n  const choiceClassNames = choice => {\n    const isSelectedAnswer =\n      userAnswers[id] && userAnswers[id].answer === choice;\n    const isCorrectAnswer = choice === correctChoice;\n    const isWrongAnswer = isSelectedAnswer && !isCorrectAnswer;\n\n    return {\n      \"answer-selected\": isSelectedAnswer && !isAnswersSubmitted,\n      \"answer-correct\": isCorrectAnswer && isAnswersSubmitted,\n      \"answer-wrong\": isWrongAnswer && isAnswersSubmitted\n    };\n  };\n\n  return (\n    <div className=\"slide slide-question\">\n      <div className=\"question\">\n        <h3>{question}</h3>\n      </div>\n\n      <ul className=\"choice-container\">\n        {choices &&\n          choices.map(choice => {\n            return (\n              <li\n                key={choice}\n                className={classNames(\"choice-item\", choiceClassNames(choice))}\n              >\n                <button onClick={() => handleOnClick(choice)}>{choice}</button>\n              </li>\n            );\n          })}\n      </ul>\n\n      {isAnswersSubmitted && (\n        <div className=\"explanation\">\n          <p>{explanation}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function SlideSubmitAnswer(props) {\n  const { onClick } = props;\n\n  return (\n    <div className=\"slide slide-submit-answer\">\n      <h1>Congratulation on finishing the quiz</h1>\n\n      <button onClick={onClick}>Click here to submit your answer</button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function SlideLast() {\n  return (\n    <div className=\"slide slide-last\">\n      <h2>Share this quiz</h2>\n      <h2>Have better questions?</h2>\n      <button>Fork the repo</button>\n      <p>or</p>\n      <button>Open a Pull Request</button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function SlideLoading() {\n  return (\n    <div className=\"slide slide-loading\">\n      <h1>Loading..</h1>\n    </div>\n  );\n}\n","import React, { useState, useRef } from \"react\";\nimport Slider from \"react-slick\";\nimport classNames from \"classnames\";\nimport SlideLanding from \"./components/SlideLanding\";\nimport SlideScore from \"./components/SlideScore\";\nimport SlideQuestion from \"./components/SlideQuestion\";\nimport SlideSubmitAnswer from \"./components/SlideSubmitAnswer\";\nimport SlideLast from \"./components/SlideLast\";\nimport SlideLoading from \"./components/SlideLoading\";\nimport quizList from \"./quizList.json\";\n\nfunction App() {\n  const [userAnswers, setUserAnswers] = useState({});\n  const [score, setScore] = useState(0);\n  const [isAnswersSubmitted, setIsAnswersSubmitted] = useState(false);\n  const [isLoading, setisLoading] = useState(false);\n  const slider = useRef(null);\n  const loadingDuration = 3000;\n\n  const nextSlide = () => {\n    slider.current.slickNext();\n  };\n\n  const selectAnswer = ({ id, answer }) => {\n    setUserAnswers(prevAnswers => ({\n      ...prevAnswers,\n      [id]: {\n        answer\n      }\n    }));\n    nextSlide();\n  };\n\n  const checkAnswers = () => {\n    let checkedAnswers = {};\n\n    for (let id in userAnswers) {\n      const answer = userAnswers[id].answer;\n      const isCorrect =\n        quizList.find(quiz => quiz.id === id).correctChoice === answer;\n\n      checkedAnswers[id] = {\n        answer,\n        isCorrect\n      };\n    }\n\n    calculateScore(checkedAnswers);\n    setUserAnswers(checkedAnswers);\n  };\n\n  const calculateScore = checkedAnswers => {\n    let totalScore = 0;\n\n    Object.values(checkedAnswers).forEach(answer => {\n      if (answer.isCorrect) {\n        totalScore++;\n      }\n    });\n\n    setScore(totalScore);\n  };\n\n  const submitAnswer = () => {\n    checkAnswers();\n    setIsAnswersSubmitted(true);\n    setisLoading(true);\n\n    setTimeout(() => {\n      setisLoading(false);\n    }, loadingDuration);\n  };\n\n  const appendDots = dots => (\n    <ul>\n      {dots.map(dot => {\n        return React.cloneElement(dot, {\n          className: classNames(dot.props.className, {\n            \"dot-answered\": userAnswers[dot.key] && !isAnswersSubmitted,\n            \"dot-correct\":\n              userAnswers[dot.key] && userAnswers[dot.key].isCorrect,\n            \"dot-wrong\":\n              userAnswers[dot.key] && userAnswers[dot.key].isCorrect === false\n          })\n        });\n      })}\n    </ul>\n  );\n\n  var sliderSettings = {\n    dots: true,\n    infinite: false,\n    arrows: false,\n    appendDots\n  };\n\n  return isLoading ? (\n    <SlideLoading />\n  ) : (\n    <Slider ref={slider} {...sliderSettings}>\n      {isAnswersSubmitted ? (\n        <SlideScore score={score} onClickShowAnswer={nextSlide} />\n      ) : (\n        <SlideLanding onClick={nextSlide} />\n      )}\n\n      {quizList.map(quiz => (\n        <SlideQuestion\n          quiz={quiz}\n          key={quiz.id}\n          userAnswers={userAnswers}\n          selectAnswer={selectAnswer}\n          isAnswersSubmitted={isAnswersSubmitted}\n        />\n      ))}\n\n      {isAnswersSubmitted ? (\n        <SlideLast />\n      ) : (\n        <SlideSubmitAnswer onClick={submitAnswer} />\n      )}\n    </Slider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}